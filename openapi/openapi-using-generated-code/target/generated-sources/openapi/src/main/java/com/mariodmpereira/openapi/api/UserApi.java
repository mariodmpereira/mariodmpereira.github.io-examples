/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mariodmpereira.openapi.api;

import com.mariodmpereira.openapi.model.UserDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-07-13T20:46:20.323189+01:00[Europe/Lisbon]")
@Validated
@Tag(name = "User", description = "the User API")
public interface UserApi {

    /**
     * GET /users/{user_id}
     * Find an user by its id.
     *
     * @param userId  (required)
     * @return Successful request. (status code 200)
     *         or Request resource was not found. (status code 404)
     */
    @Operation(
        operationId = "getUserById",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Request resource was not found.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{user_id}",
        produces = { "application/json" }
    )
    ResponseEntity<UserDto> getUserById(
        @Parameter(name = "user_id", description = "", required = true) @PathVariable("user_id") Long userId
    );

}
